import tkinter as tk
import json
import os

ANNOUNCEMENTS_FILE = "announcement.json"

class AnnouncementsPopup(tk.Toplevel):
    def __init__(self, master):
        super().__init__(master)
        self.title("Announcements")
        self.geometry("800x500")
        self.configure(bg="#f9fafb")

        # Left and Right Panels
        self.left_panel = tk.Frame(self, bg="#e0e7ff", width=250)
        self.left_panel.pack(side="left", fill="y", padx=20, pady=20)

        self.right_panel = tk.Frame(self, bg="#ffffff")
        self.right_panel.pack(side="right", fill="both", expand=True, padx=20, pady=20)

        # Left title
        tk.Label(self.left_panel, text="ANNOUNCEMENT LIST", font=("Helvetica", 14, "bold"),
                 bg="#e0e7ff", fg="#0f172a").pack(pady=(0, 20))

        self.buttons_frame = tk.Frame(self.left_panel, bg="#e0e7ff")
        self.buttons_frame.pack(fill="y", expand=True)

        # Right Title & Body
        self.title_label = tk.Label(self.right_panel, text="SELECTED ANNOUNCEMENT TITLE",
                                    font=("Helvetica", 14, "italic"), bg="#ffffff", fg="#0f172a")
        self.title_label.pack(pady=(10, 5))

        self.body_box = tk.Text(self.right_panel, wrap="word", width=60, height=15,
                                font=("Helvetica", 11), bg="#ffffff", fg="#0f172a", state="disabled")
        self.body_box.pack(pady=(5, 10))

        self.load_announcements()

    def load_announcements(self):
        announcements = []

        # Safely read JSON
        try:
            if os.path.exists(ANNOUNCEMENTS_FILE):
                with open(ANNOUNCEMENTS_FILE, "r", encoding="utf-8") as f:
                    announcements = json.load(f)
                    if not isinstance(announcements, list):
                        raise ValueError("Invalid format")
        except Exception as e:
            print(f"[WARNING] Couldn't load announcements: {e}")
            announcements = []

        # Clean left panel
        for widget in self.buttons_frame.winfo_children():
            widget.destroy()

        if not announcements:
            tk.Label(self.buttons_frame, text="No announcements yet.",
                     font=("Helvetica", 11), bg="#e0e7ff", fg="#475569").pack()
            return

        for ann in announcements[::-1]:
            btn = tk.Button(self.buttons_frame, text=ann["title"], width=25, anchor="w",
                            bg="#93c5fd", fg="#0f172a", font=("Helvetica", 11, "bold"),
                            command=lambda a=ann: self.display_announcement(a))
            btn.pack(pady=5)

    def display_announcement(self, ann):
        self.title_label.config(text=ann.get("title", ""))
        self.body_box.config(state="normal")
        self.body_box.delete("1.0", "end")
        self.body_box.insert("1.0", ann.get("content", ""))
        self.body_box.config(state="disabled")